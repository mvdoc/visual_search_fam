function distractor_pos = get_distractor_position(targets, setsize)
% Given an array of target positions of length N, returns an array (N, setsize)
% with randomly chosen distractor positions, following the simmetrical
% structure we want to keep

ntargets = length(targets);
distractor_pos = zeros([ntargets, setsize-1]);

% available positions -- for symmetry
distr_position{1} = {{4}, {5}, {6}, {1}, {2}, {3}};
distr_position{2} = {...
    {[3, 4, 6], [2, 4, 5]}, ...
    {[4, 5, 1], [3, 5, 6]}, ...
    {[2, 5, 6], [4, 6, 1]}, ...
    {[1, 3, 6], [1, 2, 5]}, ...
    {[4, 2, 1], [6, 2, 3]}, ...
    {[2, 3, 5], [1, 3, 4]}};
distr_position{3} = {...
    {[2, 3, 4, 5, 6]}, ...
    {[1, 3, 4, 5, 6]}, ...
    {[1, 2, 4, 5, 6]}, ...
    {[1, 2, 3, 5, 6]}, ...
    {[1, 2, 3, 4, 6]}, ...
    {[1, 2, 3, 4, 5]}};

for i=1:ntargets
    ok_pos = distr_position{setsize/2}{targets(i)};
    n_ok_pos = length(ok_pos);
    distractor_pos(i, :) = ok_pos{randsample(1:n_ok_pos, 1)};
end

end